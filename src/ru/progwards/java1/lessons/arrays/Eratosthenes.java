package ru.progwards.java1.lessons.arrays;
//    Примечание: для отладки удобно использовать функцию public static void main(String[] args),
//    она может присутствовать во всех выполненных задачах.
//
//    Задача 1. Решето Эратосфена, класс ru.progwards.java1.lessons.arrays.Eratosthenes
//    Эратосфе́н Кире́нский (др.-греч. Ἐρατοσθένης ὁ Κυρηναῖος; 276 год до н. э.—194 год до н. э.)
//    — греческий математик, астроном, географ, филолог и поэт.
//    Решето́ Эратосфе́на — алгоритм нахождения всех простых чисел до заданного целого числа N.
//    Согласно легенде, Эратосфен писал числа на дощечке, покрытой воском, и прокалывал дырочки
//    в тех местах, где были написаны составные числа. Поэтому дощечка являлась неким подобием
//    решета, через которое «просеивались» все составные числа, а оставались только числа простые.
//            Алгоритм:
//    Для нахождения всех простых чисел не больше заданного числа N, следуя методу Эратосфена,
//    нужно выполнить следующие шаги:
//
//    Выписать подряд все целые числа от двух до n (2, 3, 4, …, N).
//    Пусть переменная p изначально равна двум — первому простому числу.
//    Зачеркнуть в списке числа от 2p до N считая шагами по p
//    (это будут числа кратные p: 2p, 3p, 4p, …).
//    Найти первое незачёркнутое число в списке, большее чем p,
//    и присвоить значению переменной p это число.
//    Повторять шаги 3 и 4, пока возможно.
//    Теперь все незачёркнутые числа в списке — это все простые числа от 2 до n.
//
//    Говоря простым языком, надо вначале вычеркнуть все числа, которые делятся на 2,
//    кроме самой двойки, т.е. каждое второе число, потом, которые делятся на 3, т.е.
//    каждое 3-е число, кроме самой 3-ки, и т.д. в цикле

import java.util.Arrays;

//1.1 Реализовать класс Eratosthenes, содержащий:
//        массив чисел, собственно, "решето"
//private boolean[] sieve, для того, чтобы узнать, я является ли число n простым,
// нужно взять значение по индексу в массиве. sieve[n].
// Значение true, означает простое число, false - составное.
public class Eratosthenes {
    private boolean [] sieve;


    //        1.2 Реализовать конструктор
    //      public Eratosthenes(int N), который должен разместить массив sieve с размером в N
    //      и заполнить его значениями true, после чего вызвать метод sift()
    public Eratosthenes(int N){
        sieve = new boolean[N];
        Arrays.fill(sieve, true);
        sift();
    }

    //        1.3 Реализовать метод
    //        private void sift(), который, собственно и реализует алгоритм Эратосфена, просеивая составные числа.
    //        Подсказка - нужно реализовать 2 вложенных цикла, внешний,
    //        например по i от 2 до N-1, и внутренний, например по j
    //        который будет просеивать числа, кратные переменной внешнего цикла i*j.
    private void sift(){
            for(int p = 2; p*p <= sieve.length - 1; p++)
            {
                if(sieve[p] == true)
                {
                    for(int i = p*2; i <= sieve.length - 1; i += p)
                        sieve[i] = false;
                }
            }


    }

    // 1.4 Реализовать метод
    // public boolean isSimple(int n), который возвращает sieve[n],
    // что бы можно было узнать, простое число n или составное
    public boolean isSimple(int n){
        return sieve[n];
    }

    public static void main(String[] args) {

    }

}
