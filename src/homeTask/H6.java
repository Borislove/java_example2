package homeTask;

public class H6 {
//    homeTask.H6 Домашнее задание
//    Поместите исходные тексты с выполненным заданием в package ru.progwards.java1.lessons.arrays
//
//    Примечание: для отладки удобно использовать функцию public static void main(String[] args),
//    она может присутствовать во всех выполненных задачах.
//
//    Задача 1. Решето Эратосфена, класс ru.progwards.java1.lessons.arrays.Eratosthenes
//    Эратосфе́н Кире́нский (др.-греч. Ἐρατοσθένης ὁ Κυρηναῖος; 276 год до н. э.—194 год до н. э.)
//    — греческий математик, астроном, географ, филолог и поэт.
//    Решето́ Эратосфе́на — алгоритм нахождения всех простых чисел до заданного целого числа N.
//    Согласно легенде, Эратосфен писал числа на дощечке, покрытой воском, и прокалывал дырочки
//    в тех местах, где были написаны составные числа. Поэтому дощечка являлась неким подобием
//    решета, через которое «просеивались» все составные числа, а оставались только числа простые.
//            Алгоритм:
//    Для нахождения всех простых чисел не больше заданного числа N, следуя методу Эратосфена,
//    нужно выполнить следующие шаги:
//
//    Выписать подряд все целые числа от двух до n (2, 3, 4, …, N).
//    Пусть переменная p изначально равна двум — первому простому числу.
//    Зачеркнуть в списке числа от 2p до N считая шагами по p
//    (это будут числа кратные p: 2p, 3p, 4p, …).
//    Найти первое незачёркнутое число в списке, большее чем p,
//    и присвоить значению переменной p это число.
//    Повторять шаги 3 и 4, пока возможно.
//    Теперь все незачёркнутые числа в списке — это все простые числа от 2 до n.
//
//    Говоря простым языком, надо вначале вычеркнуть все числа, которые делятся на 2,
//    кроме самой двойки, т.е. каждое второе число, потом, которые делятся на 3, т.е.
//    каждое 3-е число, кроме самой 3-ки, и т.д. в цикле
//
//1.1 Реализовать класс ru.progwards.java1.lessons.arrays.Eratosthenes, содержащий:
//    массив чисел, собственно, "решето"
//    private boolean[] sieve, для того, чтобы узнать, я является ли число n простым,
//    нужно взять значение по индексу в массиве. sieve[n]. Значение true, означает
//    простое число, false - составное.
//1.2 Реализовать конструктор
//    public ru.progwards.java1.lessons.arrays.Eratosthenes(int N), который должен разместить массив sieve с
//    размером в N и заполнить его значениями true, после чего вызвать метод sift()
//1.3 Реализовать метод
//    private void sift(), который, собственно и реализует алгоритм Эратосфена, просеивая составные числа.
//    Подсказка - нужно реализовать 2 вложенных цикла, внешний,
//    например по i от 2 до N-1, и внутренний, например по j который будет просеивать числа,
//    кратные переменной внешнего цикла i*j.
//1.4 Реализовать метод
//    public boolean isSimple(int n), который возвращает sieve[n], что бы можно было узнать,
//    простое число n или составное
//
//    Задача 2. Свой алгоритм сортировки, класс ArraySort
//
//2.1 Реализовать метод, сортирующий произвольный массив целых чисел:
//    public static void sort(int[] a), по следующему алгоритму:
//            1. Берем первый элемент и сравниваем его со вторым, если второй меньше,
//            меняем элементы в массиве местами.
//            2. Далее, сравниваем первый элемент с третьим, и если третий меньше, меняем их местами.
//            3. Так делаем для всех элементов с индексом больше первого
//4. Берем второй элемент и сравниваем его с третьим, если нужно, меняем местам
//5. Далее сравниваем второй элемент с четвертым, и если нужно, меняем местами.
//6. Делаем так для всех элементов, с индексом больше 2-го
//7. Переходим к элементу с индексом 3...
//            8. Обобщая, алгоритм звучит следующим образом - сделать 2 вложенных цикла,
//            внешний по i и внутренний по j. Внутренний цикл начинается от i+1, и если a[i] > a[j],
//            то нужно поменять элементы a[i] и a[j] местами.
//
//            Задача 3. Класс DIntArray
//    Реализовать динамический, саморастущий массив целых чисел, по следующей спецификации:
//
//            3.1 в классе разместить private переменную - массив целых чисел.
//3.2 конструктор - по умолчанию.
//            3.2 метод
//    public void add(int num) - добавляет элемент num в конец массива,
//    при этом размер массива должен увеличиться на 1. Для этого нужно будет разместить новый
//    массив нужного размера, скопировать в него старый, и добавить в хвост элемент num.
//3.3 метод
//    public void atInsert(int pos, int num) - добавляет элемент num в позицию pos массива,
//    при этом размер массива должен увеличиться на 1. Для этого нужно будет разместить новый
//    массив нужного размера, скопировать в него старый, c учетом того, что новый элемент
//    окажется где-то в середине, и потом положить в нужный индекс элемент num.
//            3.4 метод
//    public void atDelete(int pos) - удаляет элемент в позиции pos массива, при этом размер
//    массива должен уменьшиться на 1. Для этого нужно будет разместить новый массив нужного размера,
//    скопировать в него старый, уже без элемента, который был в позиции pos.
//            3.5 метод
//    public int at(int pos) - возвращает элемент по индексу pos.


}
